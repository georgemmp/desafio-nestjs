var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.069,1,1.6]],["body/modules/AppModule.html",[0,1.663,1,2.984,2,1.237,3,1.237,4,1.625,5,1.625,6,1.237,7,1.625,8,1.625,9,2.244,10,2.244,11,2.496,12,0.05,13,2.496,14,2.196,15,1.625,16,1.625,17,0.466,18,0.391,19,0.391,20,2.783,21,3.034,22,0.799,23,0.635,24,2.783,25,2.783,26,2.244,27,1.413,28,1.89,29,2.783,30,2.783,31,0.466,32,0.078,33,0.025,34,0.034,35,0.025]],["title/controllers/AuthController.html",[36,1.392,37,1.6]],["body/controllers/AuthController.html",[12,0.05,17,0.408,18,0.342,19,0.342,22,0.722,23,0.556,31,0.408,32,0.068,33,0.022,34,0.031,35,0.022,36,1.236,37,2.003,38,1.236,39,1.963,40,1.963,41,2.435,42,0.479,43,1.339,44,2.767,45,2.329,46,1.963,47,1.891,48,1.742,49,3.431,50,1.031,51,2.435,52,1.525,53,1.525,54,0.901,55,1.525,56,2.928,57,1.339,58,2.19,59,1.653,60,3.431,61,2.435,62,2.435,63,2.435,64,1.765,65,1.963,66,1.653,67,2.319,68,2.435,69,2.435,70,1.653,71,1.236,72,2.435,73,1.339,74,2.435,75,2.435,76,2.435]],["title/modules/AuthModule.html",[0,1.069,11,1.392]],["body/modules/AuthModule.html",[0,1.499,2,1.018,3,1.018,4,1.337,5,1.337,6,1.018,7,2.242,8,2.242,11,2.518,12,0.05,14,1.918,15,1.337,16,1.337,17,0.384,18,0.322,19,0.322,21,1.848,22,0.816,23,0.523,26,1.848,27,1.163,31,0.384,32,0.064,33,0.021,34,0.03,35,0.021,37,2.242,38,1.668,64,2.055,65,1.848,77,1.848,78,1.848,79,1.848,80,2.613,81,2.291,82,2.291,83,3.286,84,1.556,85,2.291,86,1.556,87,1.018,88,1.556,89,2.291,90,2.291,91,2.291,92,1.556,93,2.291,94,2.291,95,1.848,96,2.291,97,2.291,98,2.291,99,2.291]],["title/injectables/AuthService.html",[64,1.218,100,0.824]],["body/injectables/AuthService.html",[12,0.05,17,0.356,18,0.298,19,0.298,22,0.722,23,0.485,27,1.079,31,0.356,32,0.06,33,0.019,34,0.028,35,0.019,42,0.418,43,1.214,44,2.509,45,2.112,46,2.509,50,1.106,52,1.635,53,1.635,54,0.967,55,1.635,56,2.112,57,1.214,58,2.057,59,2.112,64,1.382,70,2.112,71,1.579,73,1.214,86,1.442,87,2.002,88,1.442,100,0.935,101,1.079,102,1.713,103,2.287,104,1.713,105,4.654,106,2.125,107,2.363,108,2.125,109,2.125,110,1.713,111,1.713,112,1.713,113,1.713,114,2.125,115,1.579,116,1.579,117,1.579,118,2.125,119,1.24,120,1.079,121,2.125,122,2.125,123,3.111,124,2.125]],["title/injectables/JwtStrategy.html",[80,1.392,100,0.824]],["body/injectables/JwtStrategy.html",[12,0.051,17,0.384,18,0.322,19,0.322,22,0.774,23,0.523,27,1.163,31,0.384,32,0.064,33,0.021,34,0.03,35,0.021,42,0.45,43,1.282,47,1.637,50,0.988,52,1.46,53,1.46,54,0.863,55,1.46,57,0.894,58,1.668,66,1.556,70,2.231,71,1.163,73,0.894,80,1.668,84,1.556,87,2.055,88,1.556,92,1.556,95,1.848,100,0.988,101,1.163,103,1.95,104,1.848,110,2.65,111,1.848,113,1.848,115,1.668,116,1.668,117,1.163,119,1.337,120,1.163,125,1.848,126,2.65,127,2.291,128,3.286,129,2.291,130,3.286,131,2.291,132,2.291,133,2.291,134,1.848,135,1.337,136,2.291,137,2.291,138,2.291,139,2.291,140,2.291,141,2.291]],["title/classes/Task.html",[32,0.077,142,1.6]],["body/classes/Task.html",[12,0.05,17,0.42,18,0.352,19,0.352,22,0.586,31,0.42,32,0.07,33,0.023,34,0.032,35,0.023,42,0.493,47,1.945,48,2.218,50,1.313,54,1.148,135,2.045,142,2.045,143,1.273,144,2.023,145,3.255,146,2.378,147,3.255,148,3.255,149,4.037,150,1.942,151,3.707,152,2.508,153,2.378,154,3.255,155,2.508,156,2.508,157,2.508,158,1.703,159,3.503,160,3.503,161,2.508,162,2.825,163,3.503,164,1.464,165,2.508,166,2.508]],["title/controllers/TasksController.html",[36,1.392,167,1.6]],["body/controllers/TasksController.html",[12,0.05,17,0.535,18,0.448,19,0.448,22,0.69,23,0.729,31,0.535,32,0.09,33,0.029,34,0.038,35,0.029,36,1.622,38,1.622,40,2.576,42,0.628,43,1.608,48,1.622,50,0.96,57,1.246,73,1.246,150,1.42,167,2.406,168,2.576,169,3.324,170,4.821,171,3.195,172,1.831,173,2.576,174,3.195,175,3.195,176,3.195]],["title/modules/TasksModule.html",[0,1.069,13,1.392]],["body/modules/TasksModule.html",[0,1.735,2,1.346,3,1.346,4,1.768,5,1.768,6,1.346,7,2.596,8,1.768,12,0.049,13,2.557,14,2.324,15,1.768,16,1.768,17,0.507,18,0.425,19,0.425,22,0.744,23,0.691,31,0.507,32,0.085,33,0.028,34,0.036,35,0.028,38,2.021,167,2.596,172,2.238,173,2.443,177,2.443,178,2.443,179,3.029,180,3.029]],["title/injectables/TasksService.html",[100,0.824,172,1.218]],["body/injectables/TasksService.html",[12,0.048,17,0.64,18,0.536,19,0.536,22,0.64,23,0.872,31,0.64,32,0.107,33,0.035,34,0.042,35,0.035,100,1.386,101,1.941,172,2.048,181,3.083]],["title/classes/User.html",[32,0.077,47,1.069]],["body/classes/User.html",[12,0.05,17,0.33,18,0.277,19,0.277,22,0.59,31,0.33,32,0.055,33,0.018,34,0.027,35,0.018,42,0.388,43,1.149,47,1.149,48,2.227,50,1.366,52,0.877,53,0.877,54,1.194,55,0.877,57,0.77,58,1.496,73,0.77,103,1.789,115,1.002,116,1.789,117,1.002,135,1.72,142,2.441,143,1.002,145,2.842,146,2,148,2.842,150,2.193,151,3.851,153,2,154,2.842,158,1.34,162,2.376,164,1.152,169,2.842,182,1.592,183,2.281,184,2.842,185,2.281,186,2.946,187,1.974,188,1.974,189,1.974,190,1.974,191,1.974,192,1.974,193,1.974,194,2.946,195,1.974,196,2.946,197,1.974,198,1.974,199,2,200,1.974,201,1.974,202,2.946,203,1.592,204,1.974,205,1.974]],["title/classes/UserDto.html",[32,0.077,107,1.392]],["body/classes/UserDto.html",[12,0.049,17,0.464,18,0.389,19,0.389,22,0.464,31,0.464,32,0.105,33,0.025,34,0.034,35,0.025,42,0.545,48,2.159,50,1.278,54,1.117,107,1.904,116,2.159,143,1.406,146,2.546,150,2.181,183,2.78,185,2.482,206,2.234,207,4.252,208,2.77,209,2.77,210,3.751,211,3.751,212,3.751,213,3.751,214,2.77,215,4.557,216,2.77,217,2.77,218,2.77,219,1.881,220,2.77,221,2.77]],["title/classes/UserRepository.html",[32,0.077,87,1.218]],["body/classes/UserRepository.html",[12,0.051,17,0.283,18,0.238,19,0.238,22,0.654,23,0.386,31,0.283,32,0.048,33,0.015,34,0.024,35,0.015,42,0.333,43,1.023,45,1.78,47,1.524,50,0.964,52,1.426,53,1.426,54,0.843,55,1.426,56,2.452,57,1.252,58,2.098,59,1.78,66,1.149,71,1.629,73,1.252,87,1.165,103,2.321,107,2.188,112,1.365,115,1.834,116,1.984,117,1.984,119,1.53,120,1.629,135,1.53,143,0.859,150,1.836,164,0.988,183,1.873,184,2.913,185,1.53,199,1.78,203,1.365,222,1.365,223,2.587,224,2.622,225,2.622,226,2.622,227,1.693,228,1.693,229,2.622,230,1.693,231,1.693,232,1.693,233,2.622,234,1.693,235,2.622,236,1.693,237,2.622,238,1.693,239,1.693,240,1.693,241,1.693,242,1.693,243,1.693,244,1.693,245,1.693,246,1.693,247,1.693,248,1.693,249,1.693,250,1.693,251,1.693,252,1.693]],["title/injectables/ValidationPipe.html",[67,1.6,100,0.824]],["body/injectables/ValidationPipe.html",[12,0.05,17,0.371,18,0.311,19,0.311,22,0.631,23,0.505,31,0.371,32,0.106,33,0.02,34,0.029,35,0.02,42,0.435,43,1.25,50,0.963,52,1.424,53,1.424,54,0.842,55,1.424,57,1.25,67,1.871,71,1.913,73,1.47,100,0.963,101,1.124,103,1.913,115,1.913,117,1.124,119,1.292,120,1.124,126,1.785,150,0.983,153,1.503,158,1.503,219,1.503,253,1.785,254,3.205,255,3.205,256,3.205,257,3.33,258,2.213,259,3.767,260,3.767,261,3.205,262,4.13,263,2.213,264,3.33,265,3.205,266,2.213,267,2.213,268,1.785,269,2.213,270,2.213,271,3.205,272,2.213,273,2.213,274,2.213,275,2.213,276,1.785,277,2.213,278,2.213,279,2.213,280,2.213,281,2.213]],["title/coverage.html",[282,2.528]],["body/coverage.html",[6,1.191,12,0.049,19,0.376,28,1.82,32,0.126,33,0.024,34,0.033,35,0.024,36,1.862,37,1.565,39,2.162,47,1.046,54,0.704,64,1.191,67,1.565,80,1.361,87,1.191,100,1.351,102,2.162,107,1.361,120,1.361,125,2.162,142,1.565,144,2.162,167,1.565,168,2.162,172,1.191,181,2.162,182,2.162,206,2.162,222,2.162,253,2.162,257,2.162,276,4.268,282,1.82,283,2.681,284,2.681,285,2.681,286,2.162,287,2.681,288,4.181,289,4.181,290,2.681,291,2.681,292,2.162,293,4.181,294,2.681,295,2.681,296,2.681]],["title/dependencies.html",[3,1.463,297,2.297]],["body/dependencies.html",[3,1.36,12,0.05,23,0.698,27,1.554,32,0.113,33,0.028,34,0.037,35,0.028,84,2.078,86,2.078,92,2.078,134,3.232,164,1.786,199,2.078,219,2.078,268,2.468,298,4.923,299,3.061,300,3.061,301,3.061,302,3.061,303,3.061,304,3.061,305,3.061,306,2.468,307,3.061,308,3.061,309,3.061,310,3.061,311,3.061,312,3.061,313,3.061,314,3.061,315,3.061,316,3.061,317,3.061]],["title/miscellaneous/functions.html",[318,1.341,319,2.655]],["body/miscellaneous/functions.html",[6,2.25,12,0.043,33,0.037,34,0.043,35,0.037,42,0.793,292,3.253,318,2.355,319,3.253,320,4.034]],["title/index.html",[42,0.452,321,2.297,322,2.297]],["body/index.html",[12,0.049,18,0.354,33,0.023,34,0.032,35,0.023,147,2.031,223,2.031,282,1.71,323,2.519,324,2.519,325,3.513,326,2.519,327,2.519,328,2.519,329,2.519,330,2.519,331,2.519,332,2.519,333,2.519,334,2.519,335,4.046,336,2.519,337,2.519,338,2.519,339,4.894,340,2.519,341,2.519,342,2.519,343,4.769,344,2.519,345,2.519,346,3.513,347,2.519,348,2.519,349,2.519,350,2.519,351,3.513,352,3.513,353,2.519,354,2.519,355,2.519,356,3.513,357,3.513,358,2.519,359,2.519,360,2.519,361,2.519,362,2.519,363,2.031,364,2.519,365,2.519,366,2.519,367,2.519,368,2.519,369,2.519,370,2.519,371,2.519,372,2.519,373,2.519,374,2.519,375,2.519,376,2.519,377,2.519,378,2.519,379,2.519,380,2.519,381,2.519]],["title/modules.html",[2,1.655]],["body/modules.html",[1,2.231,2,1.699,11,1.941,12,0.042,13,1.941,33,0.035,34,0.042,35,0.035,363,3.992,382,4.95,383,4.95,384,4.95]],["title/overview.html",[385,3.003]],["body/overview.html",[0,1.129,1,2.902,2,1.286,3,1.286,4,1.689,5,1.689,6,1.286,7,1.689,8,1.689,9,2.334,10,2.334,11,2.618,12,0.047,13,2.454,14,2.254,15,1.689,16,1.689,33,0.026,34,0.035,35,0.026,38,1.469,64,1.932,77,2.334,78,2.334,79,2.334,80,2.577,101,1.469,143,1.469,172,1.932,177,2.334,178,2.334,385,2.334,386,2.894,387,2.894,388,3.862]],["title/miscellaneous/variables.html",[318,1.341,389,2.655]],["body/miscellaneous/variables.html",[12,0.048,28,2.88,33,0.031,34,0.039,35,0.031,42,0.657,54,1.114,183,1.95,185,1.95,264,2.694,286,2.694,306,2.694,318,1.95,389,2.694,390,3.341,391,3.341,392,3.341,393,3.341,394,3.341,395,3.341,396,3.341,397,4.241,398,3.341,399,3.341,400,3.341,401,3.341,402,3.341,403,3.341,404,3.341,405,3.341,406,3.341,407,3.341,408,3.341,409,3.341]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":276,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.1.13",{"_index":312,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":305,"title":{},"body":{"dependencies.html":{}}}],["0.2.25",{"_index":317,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":304,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":308,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":288,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":294,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":293,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":289,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":290,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":291,"title":{},"body":{"coverage.html":{}}}],["13306",{"_index":396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":387,"title":{},"body":{"overview.html":{}}}],["2.18.1",{"_index":307,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":386,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":314,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{}}}],["4",{"_index":388,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":309,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":303,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":316,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":298,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":302,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["advanced",{"_index":408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":248,"title":{},"body":{"classes/UserRepository.html":{}}}],["amazing",{"_index":364,"title":{},"body":{"index.html":{}}}],["angular",{"_index":334,"title":{},"body":{"index.html":{}}}],["app",{"_index":341,"title":{},"body":{"index.html":{}}}],["applications",{"_index":331,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":262,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["array",{"_index":280,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["async",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["auth",{"_index":41,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authcontroller",{"_index":37,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":374,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":64,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["backers",{"_index":365,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":266,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":277,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["baseentity",{"_index":145,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["bcrypt",{"_index":199,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.gensalt",{"_index":238,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":203,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["body",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":260,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":384,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":382,"title":{},"body":{"modules.html":{}}}],["building",{"_index":326,"title":{},"body":{"index.html":{}}}],["catch",{"_index":243,"title":{},"body":{"classes/UserRepository.html":{}}}],["class",{"_index":32,"title":{"classes/Task.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":143,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":177,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":178,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["column",{"_index":151,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["config/typeorm.config",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":232,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('username",{"_index":247,"title":{},"body":{"classes/UserRepository.html":{}}}],["console",{"_index":409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["constructor",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":175,"title":{},"body":{"controllers/TasksController.html":{}}}],["constructor(userrepository",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["controller",{"_index":36,"title":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":174,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":38,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["coverage",{"_index":282,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["credentials",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["decorators",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["default",{"_index":392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desafio",{"_index":399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description",{"_index":147,"title":{},"body":{"classes/Task.html":{},"index.html":{}}}],["development",{"_index":342,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":283,"title":{},"body":{"coverage.html":{}}}],["e2e",{"_index":353,"title":{},"body":{"index.html":{}}}],["eager",{"_index":159,"title":{},"body":{"classes/Task.html":{}}}],["efficient",{"_index":327,"title":{},"body":{"index.html":{}}}],["email",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{}}}],["entities",{"_index":400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/*.entity.{js",{"_index":402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":162,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["entityrepository",{"_index":231,"title":{},"body":{"classes/UserRepository.html":{}}}],["entityrepository(user",{"_index":234,"title":{},"body":{"classes/UserRepository.html":{}}}],["er_dup_entry",{"_index":246,"title":{},"body":{"classes/UserRepository.html":{}}}],["error",{"_index":244,"title":{},"body":{"classes/UserRepository.html":{}}}],["error.code",{"_index":245,"title":{},"body":{"classes/UserRepository.html":{}}}],["errors",{"_index":273,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":275,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["exists",{"_index":249,"title":{},"body":{"classes/UserRepository.html":{}}}],["expiresin",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["express",{"_index":301,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":135,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":133,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":139,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":278,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["false",{"_index":160,"title":{},"body":{"classes/Task.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["framework",{"_index":325,"title":{},"body":{"index.html":{}}}],["function",{"_index":257,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["functions",{"_index":319,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getall",{"_index":170,"title":{},"body":{"controllers/TasksController.html":{}}}],["getting",{"_index":321,"title":{"index.html":{}},"body":{}}],["grow",{"_index":360,"title":{},"body":{"index.html":{}}}],["hash",{"_index":202,"title":{},"body":{"classes/User.html":{}}}],["hashpassword",{"_index":224,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":226,"title":{},"body":{"classes/UserRepository.html":{}}}],["heavily",{"_index":332,"title":{},"body":{"index.html":{}}}],["here",{"_index":371,"title":{},"body":{"index.html":{}}}],["host",{"_index":393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":378,"title":{},"body":{"index.html":{}}}],["id",{"_index":148,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["identifier",{"_index":284,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":269,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":42,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["injectable",{"_index":100,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectrepository",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["injectrepository(userrepository",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["inspired",{"_index":333,"title":{},"body":{"index.html":{}}}],["installation",{"_index":338,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":340,"title":{},"body":{"index.html":{}}}],["internalservererrorexception",{"_index":233,"title":{},"body":{"classes/UserRepository.html":{}}}],["isemail",{"_index":207,"title":{},"body":{"classes/UserDto.html":{}}}],["isstring",{"_index":215,"title":{},"body":{"classes/UserDto.html":{}}}],["isstring()@minlength(6)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":209,"title":{},"body":{"classes/UserDto.html":{}}}],["join",{"_index":367,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":138,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":80,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":375,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["license",{"_index":381,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":357,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manytoone",{"_index":163,"title":{},"body":{"classes/Task.html":{}}}],["manytoone(undefined",{"_index":157,"title":{},"body":{"classes/Task.html":{}}}],["matches",{"_index":217,"title":{},"body":{"classes/UserDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":221,"title":{},"body":{"classes/UserDto.html":{}}}],["matching",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":212,"title":{},"body":{"classes/UserDto.html":{}}}],["metadata",{"_index":311,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":259,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["methods",{"_index":43,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["minlength",{"_index":218,"title":{},"body":{"classes/UserDto.html":{}}}],["minlength(6",{"_index":220,"title":{},"body":{"classes/UserDto.html":{}}}],["miscellaneous",{"_index":318,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":356,"title":{},"body":{"index.html":{}}}],["mode",{"_index":346,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/tasks/tasks.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":370,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":306,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":376,"title":{},"body":{"index.html":{}}}],["name",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["nest",{"_index":335,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":380,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":299,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":300,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["new",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["node.js",{"_index":324,"title":{},"body":{"index.html":{}}}],["npm",{"_index":339,"title":{},"body":{"index.html":{}}}],["null",{"_index":252,"title":{},"body":{"classes/UserRepository.html":{}}}],["number",{"_index":153,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{},"injectables/ValidationPipe.html":{}}}],["object",{"_index":271,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["onetomany",{"_index":196,"title":{},"body":{"classes/User.html":{}}}],["onetomany(undefined",{"_index":191,"title":{},"body":{"classes/User.html":{}}}],["open",{"_index":358,"title":{},"body":{"index.html":{}}}],["optional",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["overview",{"_index":385,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":297,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["passport",{"_index":134,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":131,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":136,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":183,"title":{},"body":{"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":130,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pipetransform",{"_index":265,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass",{"_index":267,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":272,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":368,"title":{},"body":{"index.html":{}}}],["port",{"_index":395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":40,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["primarygeneratedcolumn",{"_index":154,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["private",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["production",{"_index":348,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":323,"title":{},"body":{"index.html":{}}}],["project",{"_index":359,"title":{},"body":{"index.html":{}}}],["promise",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["properties",{"_index":146,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["read",{"_index":369,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":310,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":223,"title":{},"body":{"classes/UserRepository.html":{},"index.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["result",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["returns",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["rimraf",{"_index":313,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":343,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":315,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":184,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["scalable",{"_index":328,"title":{},"body":{"index.html":{}}}],["secret",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":140,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":329,"title":{},"body":{"index.html":{}}}],["side",{"_index":330,"title":{},"body":{"index.html":{}}}],["signin",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body(new",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(userdata",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signup(@body(new",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(userdata",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["sponsors",{"_index":362,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":320,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.config.ts",{"_index":390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/typeorm.config.ts",{"_index":286,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/dtos/user.dto",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["src/dtos/user.dto.ts",{"_index":206,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/dtos/user.dto.ts:13",{"_index":214,"title":{},"body":{"classes/UserDto.html":{}}}],["src/dtos/user.dto.ts:5",{"_index":208,"title":{},"body":{"classes/UserDto.html":{}}}],["src/dtos/user.dto.ts:8",{"_index":216,"title":{},"body":{"classes/UserDto.html":{}}}],["src/entities/task.entity.ts",{"_index":144,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/entities/task.entity.ts:10",{"_index":156,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:13",{"_index":152,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:16",{"_index":161,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:7",{"_index":155,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/user.entity",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{}}}],["src/entities/user.entity.ts",{"_index":182,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/entities/user.entity.ts:12",{"_index":187,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:15",{"_index":193,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:18",{"_index":189,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:21",{"_index":190,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:24",{"_index":192,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:26",{"_index":195,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:9",{"_index":188,"title":{},"body":{"classes/User.html":{}}}],["src/main.ts",{"_index":292,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":39,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:13",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:18",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:15",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:19",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:8",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":125,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts:20",{"_index":129,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:9",{"_index":127,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/tasks/tasks.controller.ts",{"_index":168,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/modules/tasks/tasks.controller.ts:9",{"_index":171,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/modules/tasks/tasks.module.ts",{"_index":179,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/modules/tasks/tasks.service.ts",{"_index":181,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/pipes/validation.pipes",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/pipes/validation.pipes.ts",{"_index":253,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/pipes/validation.pipes.ts:19",{"_index":258,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/pipes/validation.pipes.ts:7",{"_index":263,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/repositories/userrepository",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/repositories/userrepository.ts",{"_index":222,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/repositories/userrepository.ts:29",{"_index":230,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/repositories/userrepository.ts:40",{"_index":227,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/repositories/userrepository.ts:9",{"_index":228,"title":{},"body":{"classes/UserRepository.html":{}}}],["start",{"_index":344,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":347,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":349,"title":{},"body":{"index.html":{}}}],["started",{"_index":322,"title":{"index.html":{}},"body":{}}],["starter",{"_index":337,"title":{},"body":{"index.html":{}}}],["statements",{"_index":285,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":372,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":132,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":150,"title":{},"body":{"classes/Task.html":{},"controllers/TasksController.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["super",{"_index":137,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":363,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":383,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":296,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":295,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":142,"title":{"classes/Task.html":{}},"body":{"classes/Task.html":{},"classes/User.html":{},"coverage.html":{}}}],["task.entity",{"_index":198,"title":{},"body":{"classes/User.html":{}}}],["task.user",{"_index":201,"title":{},"body":{"classes/User.html":{}}}],["tasks",{"_index":169,"title":{},"body":{"controllers/TasksController.html":{},"classes/User.html":{}}}],["tasks.controller",{"_index":180,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":173,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["taskscontroller",{"_index":167,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["taskservice",{"_index":176,"title":{},"body":{"controllers/TasksController.html":{}}}],["tasksmodule",{"_index":13,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":172,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":352,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":355,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":354,"title":{},"body":{"index.html":{}}}],["tests",{"_index":351,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":361,"title":{},"body":{"index.html":{}}}],["this.authservice.signin(userdata",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(userdata",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.findone",{"_index":250,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.hashpassword(password",{"_index":240,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.jwtservice.sign(email",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":205,"title":{},"body":{"classes/User.html":{}}}],["this.salt",{"_index":204,"title":{},"body":{"classes/User.html":{}}}],["this.tovalidate(metatype",{"_index":270,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.userrepository.findone",{"_index":141,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userrepository.signup(userdata",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.validateuserpassword(userdata",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["title",{"_index":149,"title":{},"body":{"classes/Task.html":{}}}],["topsecreto5",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":373,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":254,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":256,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":255,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":261,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":268,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["true",{"_index":405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["try",{"_index":241,"title":{},"body":{"classes/UserRepository.html":{}}}],["ts",{"_index":403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":379,"title":{},"body":{"index.html":{}}}],["type",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":164,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":279,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.includes(metatype",{"_index":281,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":336,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":158,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{},"injectables/ValidationPipe.html":{}}}],["unique",{"_index":197,"title":{},"body":{"classes/User.html":{}}}],["unique(['email",{"_index":200,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":350,"title":{},"body":{"index.html":{}}}],["user",{"_index":47,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["user.email",{"_index":235,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.entity",{"_index":165,"title":{},"body":{"classes/Task.html":{}}}],["user.password",{"_index":239,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.salt",{"_index":237,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.save",{"_index":242,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.tasks",{"_index":166,"title":{},"body":{"classes/Task.html":{}}}],["user.username",{"_index":236,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.validatepassword(password",{"_index":251,"title":{},"body":{"classes/UserRepository.html":{}}}],["userdata",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["userdto",{"_index":107,"title":{"classes/UserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["username",{"_index":185,"title":{},"body":{"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":87,"title":{"classes/UserRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["validate",{"_index":126,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":274,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(payload",{"_index":128,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatepassword",{"_index":186,"title":{},"body":{"classes/User.html":{}}}],["validatepassword(password",{"_index":194,"title":{},"body":{"classes/User.html":{}}}],["validateuserpassword",{"_index":225,"title":{},"body":{"classes/UserRepository.html":{}}}],["validateuserpassword(userdata",{"_index":229,"title":{},"body":{"classes/UserRepository.html":{}}}],["validationpipe",{"_index":67,"title":{"injectables/ValidationPipe.html":{}},"body":{"controllers/AuthController.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":219,"title":{},"body":{"classes/UserDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":264,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":287,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":389,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":345,"title":{},"body":{"index.html":{}}}],["weak",{"_index":213,"title":{},"body":{"classes/UserDto.html":{}}}],["website",{"_index":377,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":366,"title":{},"body":{"index.html":{}}}],["z",{"_index":211,"title":{},"body":{"classes/UserDto.html":{}}}],["z])(?=.*[a",{"_index":210,"title":{},"body":{"classes/UserDto.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { TasksModule } from './modules/tasks/tasks.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(typeOrmConfig),\n    AuthModule,\n    TasksModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                signIn\n                            \n                            \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \nsignIn(userData: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \nsignUp(userData: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { User } from 'src/entities/user.entity';\nimport { ValidationPipe } from 'src/pipes/validation.pipes';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private authService: AuthService,\n    ) {}\n\n    @Post('/signup')\n    signUp(@Body(new ValidationPipe()) userData: User): Promise {\n        return this.authService.signUp(userData);\n    }\n\n    @Post('/signin')\n    signIn(@Body(new ValidationPipe()) userData: User): Promise {\n        return this.authService.signIn(userData);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from 'src/repositories/UserRepository';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: 'topSecretO5',\n      signOptions: {\n        expiresIn: 3600,\n      },\n    }),\n    TypeOrmModule.forFeature([UserRepository]),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(userData: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userData: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRepository } from 'src/repositories/UserRepository';\nimport { JwtService } from '@nestjs/jwt'\nimport { UserDto } from 'src/dtos/user.dto';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @InjectRepository(UserRepository)\n        private userRepository: UserRepository,\n        private jwtService: JwtService,\n    ) {}\n\n    async signUp(userData: UserDto): Promise {\n        return this.userRepository.signUp(userData);\n    }\n\n    async signIn(userData: UserDto): Promise {\n        const email = await this.userRepository.validateUserPassword(userData);\n\n        if (!email) {\n            throw new UnauthorizedException('Invalid Credentials');\n        }\n\n        const accessToken = await this.jwtService.sign(email);\n\n        return { accessToken };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRepository } from 'src/repositories/UserRepository';\nimport { User } from 'src/entities/user.entity';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        @InjectRepository(UserRepository)\n        private userRepository: UserRepository,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: 'topSecretO5',\n        });\n    }\n\n    async validate(payload: any): Promise {\n        const { email } = payload;\n        \n        const user = await this.userRepository.findOne({ email });\n\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/task.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {eager: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, BaseEntity, Column, ManyToOne } from \"typeorm\";\nimport { User } from \"./user.entity\";\n\n@Entity()\nexport class Task extends BaseEntity{\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    title: string;\n\n    @Column()\n    description: string;\n\n    @ManyToOne(() => User, user => user.tasks, { eager: false })\n    user: User;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\n\n@Controller('tasks')\nexport class TasksController {\n    constructor(private taskService: TasksService) {}\n\n    @Get()\n    getAll() {\n        return 'tasks';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { TasksController } from './tasks.controller';\n\n@Module({\n  providers: [TasksService],\n  controllers: [TasksController]\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/tasks.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class TasksService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                tasks\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Task[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/entities/user.entity.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryGeneratedColumn, Column, OneToMany, Unique } from \"typeorm\";\nimport { Task } from \"./task.entity\";\nimport * as bcrypt from 'bcrypt';\n\n@Entity()\n@Unique(['email', 'username'])\nexport class User extends BaseEntity{\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    email: string;\n\n    @Column()\n    username: string;\n\n    @Column()\n    password: string;\n\n    @Column()\n    salt: string;\n\n    @OneToMany(() => Task, task => task.user)\n    tasks: Task[];\n\n    async validatePassword(password: string): Promise {\n        const hash = await bcrypt.hash(password, this.salt)\n        return hash === this.password;\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/user.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(6)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/user.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/user.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Matches, IsEmail, IsString, MinLength } from \"class-validator\";\n\nexport class UserDto {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    username: string;\n\n    @IsString()\n    @MinLength(6)\n    @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak'})\n    password: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/UserRepository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/UserRepository.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userData: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/UserRepository.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserPassword(userData: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/UserRepository.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Repository, EntityRepository } from \"typeorm\";\nimport { User } from \"src/entities/user.entity\";\nimport * as bcrypt from 'bcrypt';\nimport { ConflictException, InternalServerErrorException } from \"@nestjs/common\";\nimport { UserDto } from \"src/dtos/user.dto\";\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n    async signUp(userData: UserDto): Promise {\n        const { email, password, username } = userData;\n\n        const user = new User();\n        user.email = email;\n        user.username = username;\n        user.salt = await bcrypt.genSalt();\n        user.password = await this.hashPassword(password, user.salt);\n\n        try {\n            await user.save();\n        } catch (error) {\n            if (error.code === 'ER_DUP_ENTRY') {\n                throw new ConflictException('Username or email already exists');\n            } else {\n                throw new InternalServerErrorException();\n            }\n        }\n    }\n\n    async validateUserPassword(userData: UserDto): Promise {\n        const { email, password } = userData;\n        const user = await this.findOne({ email })\n\n        if (user && await user.validatePassword(password)) {\n            return user.email;\n        } else {\n            return null;\n        }\n    }\n\n    private async hashPassword(password: string, salt: string): Promise {\n        return bcrypt.hash(password, salt);\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/validation.pipes.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            toValidate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validation.pipes.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validation.pipes.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Function): boolean {\n    const types: Function[] = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entities/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pipes/validation.pipes.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/repositories/UserRepository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.0.0\n        \n            @nestjs/passport : ^7.0.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/typeorm : ^7.1.0\n        \n            bcrypt : ^4.0.1\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.12.2\n        \n            mysql : ^2.18.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            typeorm : ^0.2.25\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            typeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    type: 'mysql',\n    host: 'localhost',\n    port: 13306,\n    username: 'root',\n    password: 'root',\n    database: 'desafio',\n    entities: [__dirname + '/../entities/*.entity.{js, ts}'],\n    synchronize: true,\n    logging: 'all',\n    logger: 'advanced-console',\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
