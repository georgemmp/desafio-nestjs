var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.356,1,1.881]],["body/modules/AppModule.html",[0,2.08,1,3.505,2,1.474,3,1.474,4,1.846,5,1.846,6,1.474,7,2.53,8,1.846,9,2.439,10,2.439,11,2.685,12,0.038,13,2.992,14,2.53,15,1.846,16,1.846,17,0.315,18,0.267,19,0.267,20,2.955,21,2.878,22,0.704,23,0.664,24,2.955,25,2.955,26,2.099,27,1.33,28,2.099,29,2.955,30,4.051,31,4.051,32,2.439,33,2.53,34,2.955,35,2.955,36,2.53,37,2.955,38,2.955,39,2.439,40,2.955,41,2.955,42,2.955,43,2.955,44,4.051,45,4.051,46,0.315,47,0.08,48,0.018,49,0.025,50,0.018]],["title/controllers/AuthController.html",[51,1.675,52,1.881]],["body/controllers/AuthController.html",[12,0.038,17,0.315,18,0.267,19,0.267,22,0.644,23,0.664,46,0.315,47,0.08,48,0.018,49,0.025,50,0.018,51,1.643,52,2.53,53,1.643,54,2.439,55,2.439,56,2.955,57,0.315,58,1.232,59,3.344,60,2.878,61,2.439,62,2.481,63,1.65,64,2.955,65,2.897,66,0.732,67,2.955,68,1.232,69,1.232,70,0.501,71,1.232,72,3.533,73,1.232,74,2.026,75,2.099,76,2.481,77,2.955,78,2.955,79,2.439,80,2.099,81,2.955,82,2.306,83,2.439,84,2.439,85,1.643,86,1.474,87,2.099,88,2.955,89,1.846,90,1.474,91,2.955,92,4.051,93,2.955,94,1.232,95,2.955,96,2.955,97,2.955,98,2.955]],["title/classes/AuthDto.html",[47,0.081,62,1.503]],["body/classes/AuthDto.html",[12,0.037,17,0.372,18,0.315,19,0.315,22,0.56,46,0.372,47,0.122,48,0.022,49,0.028,50,0.022,57,0.372,62,2.261,63,1.846,66,0.819,70,0.56,99,1.171,100,2.885,101,2.039,102,2.263,103,3.064,104,1.964,105,2.885,106,3.495,107,2.885,108,3.74,109,3.74,110,3.219,111,4.531,112,3.495,113,2.483,114,3.74,115,2.83,116,2.885,117,1.744,118,3.14,119,1.944,120,2.885,121,2.885]],["title/modules/AuthModule.html",[0,1.356,11,1.503]],["body/modules/AuthModule.html",[0,2.066,2,1.455,3,1.455,4,1.821,5,1.821,6,1.455,7,2.867,8,2.867,11,2.833,12,0.038,14,2.507,15,1.821,16,1.821,17,0.311,18,0.263,19,0.263,21,2.072,22,0.691,23,0.656,26,2.072,27,1.312,46,0.311,47,0.078,48,0.018,49,0.025,50,0.018,52,2.867,53,2.232,82,2.674,83,2.407,122,2.407,123,2.407,124,2.407,125,3.253,126,2.916,127,2.916,128,4.014,129,1.821,130,2.916,131,2.072,132,1.455,133,2.072,134,2.916,135,2.916,136,2.916,137,2.072,138,2.916,139,2.916,140,2.407,141,2.916,142,2.916,143,2.916,144,2.916]],["title/injectables/AuthService.html",[82,1.503,145,0.916]],["body/injectables/AuthService.html",[12,0.038,17,0.285,18,0.242,19,0.242,22,0.645,23,0.602,27,1.204,46,0.285,47,0.072,48,0.016,49,0.023,50,0.016,57,0.285,58,1.149,59,3.121,60,2.686,61,3.121,62,2.377,66,0.792,68,1.333,69,1.333,70,0.542,71,1.333,72,2.686,73,1.149,74,1.941,75,2.686,76,2.377,82,1.886,85,1.488,86,1.335,87,1.901,89,2.361,90,1.886,94,1.149,102,1.973,131,1.901,132,2.603,133,1.901,145,1.149,146,1.335,147,2.209,148,2.348,149,2.209,150,5.362,151,2.676,152,2.676,153,2.676,154,2.209,155,1.901,156,2.209,157,2.676,158,1.54,159,1.204,160,2.676,161,1.488,162,1.09,163,2.676,164,2.676,165,3.781,166,2.676]],["title/classes/HttpExceptionFilter.html",[33,1.881,47,0.081]],["body/classes/HttpExceptionFilter.html",[12,0.038,17,0.327,18,0.277,19,0.277,22,0.379,23,0.69,33,2.596,46,0.327,47,0.083,48,0.019,49,0.026,50,0.019,57,0.327,58,1.264,66,0.554,68,0.933,69,0.933,70,0.379,71,0.933,73,0.933,99,1.028,110,2.18,158,2.217,162,1.25,167,3.431,168,2.533,169,2.953,170,5.052,171,4.17,172,4.156,173,5.052,174,3.89,175,5.052,176,3.068,177,3.068,178,3.068,179,2.18,180,3.068,181,3.068,182,3.068,183,3.068,184,3.068,185,3.068,186,4.156,187,3.068,188,3.431,189,3.068,190,3.068,191,3.068,192,3.068,193,3.068,194,3.068,195,4.156,196,2.533,197,4.156,198,3.068,199,2.533,200,3.068,201,3.068,202,3.068]],["title/interfaces/JwtPayload.html",[203,1.881,204,2.14]],["body/interfaces/JwtPayload.html",[12,0.036,17,0.451,18,0.382,19,0.382,46,0.451,48,0.026,49,0.031,50,0.026,57,0.451,70,0.524,101,2.3,102,2.565,104,2.027,203,2.646,204,3.631,205,4.237,206,3.497,207,3.497]],["title/injectables/JwtStrategy.html",[125,1.675,145,0.916]],["body/injectables/JwtStrategy.html",[12,0.038,17,0.311,18,0.263,19,0.263,22,0.663,23,0.656,27,1.312,46,0.311,47,0.078,48,0.018,49,0.025,50,0.018,57,0.311,58,1.22,66,0.725,68,1.22,69,1.22,70,0.496,71,1.22,73,0.886,74,1.635,89,2.507,90,1.455,94,0.886,102,1.807,125,2.232,129,1.821,132,2.674,133,2.072,137,2.072,140,2.407,145,1.22,146,1.455,148,2.066,149,2.407,154,3.313,155,2.072,156,2.407,158,1.635,159,1.312,161,1.621,162,1.188,208,2.407,209,3.313,210,2.916,211,4.014,212,2.916,213,4.014,214,2.916,215,2.916,216,2.916,217,2.407,218,1.657,219,1.621,220,1.621,221,2.916,222,2.916,223,2.916,224,2.916,225,2.916,226,2.916]],["title/injectables/LogginInterceptor.html",[36,1.881,145,0.916]],["body/injectables/LogginInterceptor.html",[12,0.038,17,0.344,18,0.291,19,0.291,22,0.598,23,0.725,36,2.685,46,0.344,47,0.087,48,0.02,49,0.026,50,0.02,57,0.344,58,1.307,66,0.583,68,0.981,69,0.981,70,0.399,71,0.981,73,0.981,94,0.981,145,1.307,146,1.61,158,2.1,169,2.292,179,2.292,196,2.663,227,2.663,228,4.298,229,4.298,230,5.155,231,4.834,232,5.155,233,3.226,234,3.226,235,4.834,236,4.298,237,2.663,238,4.298,239,3.226,240,2.663,241,3.226,242,3.226,243,4.298,244,3.226,245,3.226,246,4.298,247,3.226,248,3.226,249,3.226,250,3.226]],["title/classes/Task.html",[47,0.081,251,1.356]],["body/classes/Task.html",[12,0.038,17,0.335,18,0.284,19,0.284,22,0.522,46,0.335,47,0.085,48,0.019,49,0.026,50,0.019,57,0.335,63,2.079,66,0.922,70,0.631,99,1.054,101,1.902,104,1.885,218,1.908,220,2.35,251,1.902,252,2.596,253,3.94,254,2.382,255,2.654,256,2.981,257,4.395,258,3.145,259,2.109,260,3.94,261,3.145,262,3.145,263,3.145,264,2.235,265,4.226,266,3.488,267,3.145,268,3.488,269,4.226,270,1.749,271,3.145,272,3.145]],["title/classes/TaskCreateDto.html",[47,0.081,273,1.503]],["body/classes/TaskCreateDto.html",[12,0.037,17,0.391,18,0.331,19,0.331,22,0.578,46,0.391,47,0.126,48,0.023,49,0.029,50,0.023,57,0.391,63,1.905,66,0.845,70,0.578,99,1.23,101,2.104,104,2.001,115,3.214,117,1.832,118,3.214,119,2.041,254,2.567,256,3.214,273,2.333,274,2.567,275,2.608,276,3.86,277,3.671,278,3.671]],["title/classes/TaskRepository.html",[47,0.081,279,1.675]],["body/classes/TaskRepository.html",[12,0.038,17,0.195,18,0.165,19,0.165,22,0.561,23,0.411,46,0.195,47,0.049,48,0.018,49,0.018,50,0.011,57,0.195,58,0.866,66,0.774,68,1.302,69,1.302,70,0.529,71,1.302,73,1.302,74,2.095,86,0.913,94,1.201,99,0.613,148,2.481,158,1.847,159,2.041,161,1.584,162,1.425,218,2.009,219,1.017,220,1.584,251,2.264,254,2.136,255,2.197,256,2.674,259,2.51,270,1.017,273,1.971,274,1.422,279,1.584,280,1.51,281,2.486,282,2.849,283,2.024,284,2.024,285,2.849,286,2.849,287,2.849,288,1.829,289,2.849,290,2.024,291,1.829,292,2.024,293,1.829,294,2.849,295,1.829,296,2.849,297,2.807,298,1.971,299,1.829,300,1.51,301,1.3,302,1.829,303,1.3,304,1.829,305,1.829,306,3.5,307,3.5,308,2.352,309,2.849,310,1.51,311,1.829,312,2.849,313,2.849,314,1.829,315,1.829,316,1.829,317,1.3]],["title/classes/TaskUpdateDto.html",[47,0.081,298,1.503]],["body/classes/TaskUpdateDto.html",[12,0.037,17,0.386,18,0.327,19,0.327,22,0.573,46,0.386,47,0.125,48,0.022,49,0.029,50,0.022,57,0.386,63,1.889,66,0.838,70,0.573,99,1.215,101,2.088,104,1.992,115,3.195,117,1.809,118,3.195,119,2.016,254,2.552,256,3.195,274,2.552,298,2.315,318,2.992,319,4.639,320,3.625,321,3.625,322,5.115]],["title/controllers/TasksController.html",[51,1.675,323,1.881]],["body/controllers/TasksController.html",[12,0.038,17,0.211,18,0.179,19,0.179,22,0.637,23,0.446,46,0.211,47,0.053,48,0.012,49,0.019,50,0.012,51,1.102,53,1.102,55,1.636,57,0.211,58,0.922,63,1.809,65,2.046,66,0.803,68,1.35,69,1.35,70,0.549,71,1.35,73,1.35,74,2.141,79,3.038,80,1.408,84,1.636,86,0.989,94,1.35,129,1.238,218,2.024,219,1.102,251,0.892,255,2.604,259,2.571,273,2.057,274,1.512,283,2.153,284,2.153,290,1.408,292,1.408,297,3.328,298,2.057,301,1.408,303,2.615,310,1.636,323,1.893,324,1.636,325,1.408,326,2.502,327,2.502,328,3.031,329,1.982,330,1.982,331,1.636,332,3.031,333,1.982,334,1.636,335,1.982,336,1.636,337,3.031,338,1.982,339,1.982,340,1.982,341,1.982,342,4.122,343,1.512,344,1.636,345,3.156,346,1.408,347,1.982,348,1.982,349,1.982,350,1.982,351,1.982,352,1.982,353,1.982,354,1.982,355,1.982,356,1.982,357,1.982,358,1.982,359,1.982,360,1.982,361,1.982,362,1.982,363,1.982]],["title/modules/TasksModule.html",[0,1.356,13,1.675]],["body/modules/TasksModule.html",[0,2.192,2,1.634,3,1.634,4,2.045,5,2.045,6,1.634,7,3.042,8,2.045,11,2.767,12,0.038,13,3.194,14,2.711,15,2.045,16,2.045,17,0.349,18,0.295,19,0.295,21,3.084,22,0.685,23,0.736,26,2.326,27,1.474,46,0.349,47,0.088,48,0.02,49,0.027,50,0.02,53,2.414,279,1.821,323,3.042,343,2.767,344,2.703,364,2.703,365,3.274,366,2.703,367,3.274,368,3.274,369,2.703,370,3.274,371,3.274]],["title/injectables/TasksService.html",[145,0.916,343,1.503]],["body/injectables/TasksService.html",[12,0.038,17,0.221,18,0.187,19,0.187,22,0.612,23,0.466,27,0.932,46,0.221,47,0.056,48,0.013,49,0.019,50,0.013,57,0.221,58,0.953,66,0.861,68,1.448,69,1.448,70,0.589,71,1.448,73,1.377,74,2.166,86,1.033,89,1.957,90,1.033,94,1.377,145,0.953,146,1.033,148,2.541,155,1.471,159,2.038,218,2.028,219,1.151,251,0.932,255,2.102,259,2.603,273,2.104,274,1.564,279,2.649,283,2.226,284,2.226,290,2.226,292,2.226,297,3.217,298,2.104,301,1.471,303,2.686,326,2.587,327,2.587,331,2.587,334,2.587,336,2.587,343,1.564,369,1.709,372,1.709,373,2.071,374,2.071,375,2.071,376,2.071,377,2.071,378,2.071,379,2.071,380,2.071,381,2.071,382,2.071,383,2.071,384,2.071,385,2.071]],["title/classes/User.html",[47,0.081,218,1.009]],["body/classes/User.html",[12,0.038,17,0.273,18,0.232,19,0.232,22,0.53,46,0.273,47,0.069,48,0.016,49,0.023,50,0.016,57,0.273,58,1.116,63,2.096,66,0.957,68,0.78,69,0.78,70,0.655,71,0.78,73,0.78,74,1.495,94,0.78,99,0.86,101,1.652,102,1.928,103,2.6,104,2.091,148,1.928,158,1.045,159,1.155,218,1.23,220,2.041,251,2.226,253,3.536,255,2.382,257,4.552,259,1.831,260,3.536,264,1.824,268,3.03,270,1.427,308,2.119,325,3.044,386,2.119,387,3.536,388,2.92,389,3.67,390,2.567,391,2.567,392,2.567,393,2.567,394,2.567,395,2.567,396,2.567,397,3.67,398,2.567,399,3.67,400,2.567,401,2.567,402,2.608,403,2.567,404,3.67,405,2.119,406,2.567,407,2.567]],["title/classes/UserCreateDto.html",[47,0.081,76,1.503]],["body/classes/UserCreateDto.html",[12,0.037,17,0.319,18,0.27,19,0.27,22,0.505,46,0.319,47,0.11,48,0.018,49,0.025,50,0.018,57,0.319,63,2.037,66,0.904,70,0.618,76,2.04,85,2.911,99,1.004,101,1.84,102,2.095,103,2.911,104,2.079,105,2.472,107,2.472,108,3.375,109,3.375,110,2.905,113,2.128,114,3.375,115,3.124,116,2.472,117,1.495,118,3.27,119,1.665,120,3.375,121,2.472,275,2.128,276,2.472,388,2.908,408,3.842,409,2.995,410,4.088,411,4.088,412,4.088,413,4.088,414,4.088,415,2.995,416,2.995,417,2.995,418,2.995]],["title/classes/UserRepository.html",[47,0.081,132,1.503]],["body/classes/UserRepository.html",[12,0.038,17,0.229,18,0.194,19,0.194,22,0.598,23,0.484,46,0.229,47,0.058,48,0.013,49,0.02,50,0.013,57,0.229,58,0.981,60,2.292,62,2.145,66,0.699,68,1.176,69,1.176,70,0.478,71,1.176,72,3.054,73,1.176,74,1.969,75,2.292,76,2.145,85,1.197,86,1.074,87,1.529,90,1.931,94,1.176,99,0.721,102,2.072,103,2.39,104,1.785,113,1.529,132,1.61,148,2.373,158,1.751,159,2.072,161,2.152,162,1.751,171,1.776,188,1.776,199,1.776,218,1.543,219,1.197,220,1.794,270,1.197,281,2.749,300,1.776,387,3.548,388,2.015,402,2.292,405,1.776,408,2.663,419,1.776,420,3.226,421,3.226,422,3.226,423,2.152,424,2.152,425,3.226,426,2.152,427,2.152,428,3.226,429,1.776,430,2.152,431,2.152,432,3.226,433,2.152,434,3.226,435,2.152,436,2.152,437,2.152,438,2.152,439,2.152,440,2.152,441,2.152,442,2.152,443,2.152,444,2.152,445,2.152,446,2.152]],["title/injectables/ValidationPipe.html",[65,1.675,145,0.916]],["body/injectables/ValidationPipe.html",[12,0.038,17,0.243,18,0.206,19,0.206,22,0.495,23,0.513,46,0.243,47,0.108,48,0.014,49,0.021,50,0.014,57,0.243,58,1.024,65,1.873,66,0.799,68,1.345,69,1.345,70,0.547,71,1.345,73,1.345,80,1.62,90,2.672,94,1.553,104,0.842,117,1.138,145,1.024,146,1.138,148,1.802,158,1.801,159,1.026,161,1.873,162,1.372,169,1.62,209,1.882,259,1.138,264,1.62,266,1.882,317,2.393,429,1.882,447,1.882,448,3.368,449,3.368,450,3.368,451,3.368,452,3.368,453,2.28,454,3.368,455,3.368,456,2.28,457,4.076,458,4.422,459,3.368,460,3.651,461,2.28,462,4.004,463,3.368,464,4.422,465,2.28,466,3.368,467,2.28,468,1.882,469,2.28,470,4.004,471,2.28,472,2.28,473,3.368,474,2.28,475,2.28,476,2.28,477,2.28,478,2.28,479,2.28,480,2.28,481,2.28,482,2.28,483,2.28,484,2.28,485,2.28,486,2.28,487,2.28,488,1.882,489,2.28,490,1.882]],["title/coverage.html",[491,2.916]],["body/coverage.html",[6,1.352,12,0.037,19,0.244,28,1.925,33,1.692,36,1.692,47,0.15,48,0.017,49,0.023,50,0.017,51,2.121,52,1.692,54,2.236,62,1.352,65,1.506,70,0.335,76,1.352,82,1.352,85,1.506,100,2.236,125,1.506,132,1.352,145,1.535,147,2.236,162,1.103,167,2.236,168,2.236,203,1.692,204,1.925,206,2.236,207,2.236,208,2.236,218,0.908,227,2.236,251,1.219,252,2.236,273,1.352,274,1.903,275,2.709,279,1.506,280,2.236,298,1.352,317,4.293,318,2.236,323,1.692,324,2.236,343,1.352,345,1.925,346,1.925,372,2.236,386,2.236,419,2.236,447,2.236,460,2.236,491,1.925,492,2.709,493,2.709,494,2.709,495,2.236,496,4.413,497,2.236,498,4.79,499,2.236,500,2.236,501,5.049,502,4.413,503,2.709,504,4.413,505,2.236,506,3.813,507,3.813,508,2.709,509,2.709,510,2.709]],["title/dependencies.html",[3,1.807,511,2.518]],["body/dependencies.html",[3,1.765,12,0.038,23,0.795,27,1.592,32,2.92,39,2.92,47,0.123,48,0.022,49,0.028,50,0.022,117,1.765,119,1.967,129,2.21,131,2.513,137,2.513,217,3.769,237,2.92,270,1.967,402,2.513,468,2.92,512,5.532,513,3.538,514,3.538,515,4.566,516,3.538,517,3.538,518,3.538,519,3.538,520,3.538,521,2.92,522,3.538,523,3.538,524,3.538,525,3.538,526,3.538,527,3.538,528,3.538,529,3.538,530,3.538,531,3.538,532,3.538,533,3.538,534,3.538]],["title/miscellaneous/functions.html",[535,1.573,536,2.989]],["body/miscellaneous/functions.html",[6,2.833,12,0.033,48,0.028,49,0.033,50,0.028,57,0.489,505,3.789,535,2.868,536,3.789,537,4.591]],["title/index.html",[57,0.268,538,2.518,539,2.518]],["body/index.html",[12,0.037,18,0.285,48,0.019,49,0.026,50,0.019,254,1.575,281,2.243,488,2.606,491,2.243,540,3.156,541,3.156,542,4.236,543,3.156,544,3.156,545,3.156,546,3.156,547,3.156,548,3.156,549,3.156,550,3.156,551,3.156,552,4.781,553,3.156,554,3.156,555,3.156,556,5.606,557,3.156,558,3.156,559,3.156,560,5.488,561,3.156,562,3.156,563,4.236,564,3.156,565,3.156,566,3.156,567,3.156,568,4.236,569,4.236,570,3.156,571,3.156,572,3.156,573,4.236,574,4.236,575,3.156,576,3.156,577,3.156,578,3.156,579,3.156,580,2.606,581,3.156,582,3.156,583,3.156,584,3.156,585,3.156,586,3.156,587,3.156,588,3.156,589,3.156,590,3.156,591,3.156,592,3.156,593,3.156,594,3.156,595,3.156,596,3.156,597,3.156]],["title/modules.html",[2,2.048]],["body/modules.html",[1,2.753,2,2.199,11,2.199,12,0.032,13,2.45,48,0.027,49,0.032,50,0.027,580,4.607,598,5.581,599,5.581,600,5.581]],["title/overview.html",[601,3.388]],["body/overview.html",[0,1.555,1,3.516,2,1.724,3,1.724,4,2.158,5,2.158,6,1.724,7,2.158,8,2.158,9,2.851,10,2.851,11,2.931,12,0.036,13,3.187,14,2.808,15,2.158,16,2.158,48,0.021,49,0.028,50,0.021,53,1.921,82,2.494,99,1.158,122,2.851,123,2.851,124,2.851,125,3.187,146,1.724,203,2.158,343,2.494,364,2.851,366,2.851,601,2.851,602,3.454,603,3.454,604,3.454,605,3.454,606,3.454]],["title/miscellaneous/variables.html",[535,1.573,607,2.989]],["body/miscellaneous/variables.html",[12,0.037,28,3.154,48,0.021,49,0.027,50,0.021,57,0.361,70,0.549,94,1.03,103,1.884,162,1.38,174,2.796,179,2.407,218,1.135,240,2.796,254,1.69,325,3.154,345,3.154,346,2.407,388,2.116,457,4.088,490,2.796,495,2.796,497,3.665,499,2.796,500,3.665,521,2.796,535,2.116,607,2.796,608,3.388,609,3.388,610,3.388,611,4.952,612,3.388,613,3.388,614,3.388,615,3.388,616,3.388,617,3.388,618,3.388,619,3.388,620,3.388,621,3.388,622,3.388,623,3.388,624,3.388,625,3.388,626,3.388,627,3.388,628,3.388,629,3.388,630,3.388,631,3.388,632,3.388,633,3.388,634,3.388,635,3.388,636,3.388,637,3.388]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":317,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.1.13",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["0.2.25",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":506,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":507,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":508,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":503,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":606,"title":{},"body":{"overview.html":{}}}],["13306",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":603,"title":{},"body":{"overview.html":{}}}],["2.18.1",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":602,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{}}}],["4.0.0",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["4.5.9",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":604,"title":{},"body":{"overview.html":{}}}],["6.5.4",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":605,"title":{},"body":{"overview.html":{}}}],["__dirname",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["advanced",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alpha",{"_index":413,"title":{},"body":{"classes/UserCreateDto.html":{}}}],["already",{"_index":443,"title":{},"body":{"classes/UserRepository.html":{}}}],["amazing",{"_index":581,"title":{},"body":{"index.html":{}}}],["angular",{"_index":551,"title":{},"body":{"index.html":{}}}],["api",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiproperty",{"_index":118,"title":{},"body":{"classes/AuthDto.html":{},"classes/TaskCreateDto.html":{},"classes/TaskUpdateDto.html":{},"classes/UserCreateDto.html":{}}}],["apiproperty()@isemail",{"_index":105,"title":{},"body":{"classes/AuthDto.html":{},"classes/UserCreateDto.html":{}}}],["apiproperty()@isstring",{"_index":276,"title":{},"body":{"classes/TaskCreateDto.html":{},"classes/UserCreateDto.html":{}}}],["apiproperty()@isstring()@minlength(6",{"_index":416,"title":{},"body":{"classes/UserCreateDto.html":{}}}],["apiproperty()@isstring()@minlength(6)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":107,"title":{},"body":{"classes/AuthDto.html":{},"classes/UserCreateDto.html":{}}}],["app",{"_index":558,"title":{},"body":{"index.html":{}}}],["app_filter",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":548,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":464,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":175,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":482,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["async",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["auth",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":370,"title":{},"body":{"modules/TasksModule.html":{}}}],["authcontroller",{"_index":52,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":62,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["authguard",{"_index":348,"title":{},"body":{"controllers/TasksController.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":590,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":82,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["backers",{"_index":582,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":429,"title":{},"body":{"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('passwords",{"_index":431,"title":{},"body":{"classes/UserRepository.html":{}}}],["badrequestexception('validation",{"_index":472,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["badrequestexception(`validation",{"_index":479,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["baseentity",{"_index":253,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["bcrypt",{"_index":402,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.gensalt",{"_index":435,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":405,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["body",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"injectables/ValidationPipe.html":{}}}],["body(new",{"_index":360,"title":{},"body":{"controllers/TasksController.html":{}}}],["boolean",{"_index":458,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":600,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":598,"title":{},"body":{"modules.html":{}}}],["build",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":543,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":232,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["capital",{"_index":411,"title":{},"body":{"classes/UserCreateDto.html":{}}}],["catch",{"_index":171,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/UserRepository.html":{}}}],["catch(exception",{"_index":172,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["class",{"_index":47,"title":{"classes/AuthDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":99,"title":{},"body":{"classes/AuthDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":364,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":365,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":366,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["code",{"_index":191,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["column",{"_index":257,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["config/typeorm.config",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":427,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('username",{"_index":442,"title":{},"body":{"classes/UserRepository.html":{}}}],["console",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["constructor",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{}}}],["constructor(private",{"_index":351,"title":{},"body":{"controllers/TasksController.html":{}}}],["constructor(taskrepository",{"_index":373,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(userrepository",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["context",{"_index":234,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["context.getclass().name",{"_index":250,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":241,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["controller",{"_index":51,"title":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":350,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["coverage",{"_index":491,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create.dto",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["create.dto.ts",{"_index":275,"title":{},"body":{"classes/TaskCreateDto.html":{},"classes/UserCreateDto.html":{},"coverage.html":{}}}],["create.dto.ts:11",{"_index":277,"title":{},"body":{"classes/TaskCreateDto.html":{}}}],["create.dto.ts:12",{"_index":418,"title":{},"body":{"classes/UserCreateDto.html":{}}}],["create.dto.ts:18",{"_index":415,"title":{},"body":{"classes/UserCreateDto.html":{}}}],["create.dto.ts:23",{"_index":417,"title":{},"body":{"classes/UserCreateDto.html":{}}}],["create.dto.ts:7",{"_index":278,"title":{},"body":{"classes/TaskCreateDto.html":{}}}],["create.dto.ts:8",{"_index":409,"title":{},"body":{"classes/UserCreateDto.html":{}}}],["createparamdecorator((data",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtask",{"_index":282,"title":{},"body":{"classes/TaskRepository.html":{}}}],["createtask(taskdto",{"_index":287,"title":{},"body":{"classes/TaskRepository.html":{}}}],["credentials",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":180,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":183,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":185,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["database",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().tolocaledatestring",{"_index":193,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date.now",{"_index":246,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["decorators",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{}}}],["default",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["delete",{"_index":310,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["delete(':id",{"_index":328,"title":{},"body":{"controllers/TasksController.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":254,"title":{},"body":{"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["destroy",{"_index":283,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["destroy(@param('id",{"_index":362,"title":{},"body":{"controllers/TasksController.html":{}}}],["destroy(id",{"_index":290,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["development",{"_index":559,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["documentbuilder",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":570,"title":{},"body":{"index.html":{}}}],["eager",{"_index":265,"title":{},"body":{"classes/Task.html":{}}}],["efficient",{"_index":544,"title":{},"body":{"index.html":{}}}],["email",{"_index":102,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{}}}],["entities",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/*.entity.{js",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":268,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["entityrepository",{"_index":300,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(task",{"_index":304,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entityrepository(user",{"_index":430,"title":{},"body":{"classes/UserRepository.html":{}}}],["env",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["er_dup_entry",{"_index":441,"title":{},"body":{"classes/UserRepository.html":{}}}],["error",{"_index":188,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/UserRepository.html":{}}}],["error.code",{"_index":440,"title":{},"body":{"classes/UserRepository.html":{}}}],["error.constraints[key",{"_index":487,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorresponse",{"_index":190,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errors",{"_index":454,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":478,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.map(error",{"_index":484,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["exception",{"_index":177,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["exception.filter.ts",{"_index":168,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:5",{"_index":176,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse()['error",{"_index":189,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":187,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":198,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":170,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptions/http",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["executioncontext",{"_index":230,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["exists",{"_index":444,"title":{},"body":{"classes/UserRepository.html":{}}}],["expiresin",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["express",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":216,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":473,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["false",{"_index":266,"title":{},"body":{"classes/Task.html":{},"injectables/ValidationPipe.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["formaterrors",{"_index":448,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["formaterrors(errors",{"_index":452,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["found",{"_index":313,"title":{},"body":{"classes/TaskRepository.html":{}}}],["framework",{"_index":542,"title":{},"body":{"index.html":{}}}],["function",{"_index":460,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["functions",{"_index":536,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":332,"title":{},"body":{"controllers/TasksController.html":{}}}],["getall",{"_index":284,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["getall(@getuser",{"_index":353,"title":{},"body":{"controllers/TasksController.html":{}}}],["getall(user",{"_index":292,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["getbyid",{"_index":285,"title":{},"body":{"classes/TaskRepository.html":{}}}],["getbyid(id",{"_index":294,"title":{},"body":{"classes/TaskRepository.html":{}}}],["getone",{"_index":326,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["getone(@param('id",{"_index":355,"title":{},"body":{"controllers/TasksController.html":{}}}],["getone(id",{"_index":331,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["getting",{"_index":538,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":345,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":577,"title":{},"body":{"index.html":{}}}],["hash",{"_index":404,"title":{},"body":{"classes/User.html":{}}}],["hashpassword",{"_index":420,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":422,"title":{},"body":{"classes/UserRepository.html":{}}}],["heavily",{"_index":549,"title":{},"body":{"index.html":{}}}],["here",{"_index":587,"title":{},"body":{"index.html":{}}}],["host",{"_index":174,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":181,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":173,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":33,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":594,"title":{},"body":{"index.html":{}}}],["id",{"_index":255,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{}}}],["identifier",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":169,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LogginInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["index",{"_index":57,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["injectable",{"_index":145,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"injectables/TasksService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"injectables/TasksService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"injectables/TasksService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectrepository",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{}}}],["injectrepository(taskrepository",{"_index":380,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(userrepository",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["inspired",{"_index":550,"title":{},"body":{"index.html":{}}}],["installation",{"_index":555,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":557,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":469,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["intercept",{"_index":228,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["intercept(context",{"_index":229,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["interceptors/loggin.interceptor",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["interface",{"_index":203,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":205,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["internalservererrorexception",{"_index":428,"title":{},"body":{"classes/UserRepository.html":{}}}],["isemail",{"_index":114,"title":{},"body":{"classes/AuthDto.html":{},"classes/UserCreateDto.html":{}}}],["isempty",{"_index":449,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["isempty(value",{"_index":455,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["isoptional",{"_index":322,"title":{},"body":{"classes/TaskUpdateDto.html":{}}}],["isoptional()@apiproperty()@isstring",{"_index":319,"title":{},"body":{"classes/TaskUpdateDto.html":{}}}],["isstring",{"_index":115,"title":{},"body":{"classes/AuthDto.html":{},"classes/TaskCreateDto.html":{},"classes/TaskUpdateDto.html":{},"classes/UserCreateDto.html":{}}}],["item.res)['user",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":488,"title":{},"body":{"injectables/ValidationPipe.html":{},"index.html":{}}}],["json.stringify(errorresponse",{"_index":201,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["jwt",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":204,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["jwtservice",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":125,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":591,"title":{},"body":{"index.html":{}}}],["key",{"_index":485,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["letter",{"_index":412,"title":{},"body":{"classes/UserCreateDto.html":{}}}],["license",{"_index":597,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":574,"title":{},"body":{"index.html":{}}}],["logger",{"_index":179,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LogginInterceptor.html":{},"miscellaneous/variables.html":{}}}],["logger.error",{"_index":200,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["logger.log(`${method",{"_index":248,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["logging",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loggininterceptor",{"_index":36,"title":{"injectables/LogginInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogginInterceptor.html":{},"coverage.html":{}}}],["manytoone",{"_index":269,"title":{},"body":{"classes/Task.html":{}}}],["manytoone(undefined",{"_index":263,"title":{},"body":{"classes/Task.html":{}}}],["matches",{"_index":113,"title":{},"body":{"classes/AuthDto.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":121,"title":{},"body":{"classes/AuthDto.html":{},"classes/UserCreateDto.html":{}}}],["matching",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":110,"title":{},"body":{"classes/AuthDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/UserCreateDto.html":{}}}],["metadata",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":462,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":196,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LogginInterceptor.html":{}}}],["methods",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["minlength",{"_index":116,"title":{},"body":{"classes/AuthDto.html":{},"classes/UserCreateDto.html":{}}}],["minlength(6",{"_index":120,"title":{},"body":{"classes/AuthDto.html":{},"classes/UserCreateDto.html":{}}}],["miscellaneous",{"_index":535,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":573,"title":{},"body":{"index.html":{}}}],["mode",{"_index":563,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/tasks/tasks.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":586,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":521,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":592,"title":{},"body":{"index.html":{}}}],["name",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["nest",{"_index":552,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":596,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":236,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":119,"title":{},"body":{"classes/AuthDto.html":{},"classes/TaskCreateDto.html":{},"classes/TaskUpdateDto.html":{},"classes/UserCreateDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["new",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":231,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["next.handle().pipe",{"_index":247,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["node.js",{"_index":541,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":302,"title":{},"body":{"classes/TaskRepository.html":{}}}],["notfoundexception('task",{"_index":312,"title":{},"body":{"classes/TaskRepository.html":{}}}],["now",{"_index":245,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["now}ms",{"_index":249,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["npm",{"_index":556,"title":{},"body":{"index.html":{}}}],["null",{"_index":199,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/UserRepository.html":{}}}],["number",{"_index":259,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"injectables/ValidationPipe.html":{}}}],["numeric",{"_index":414,"title":{},"body":{"classes/UserCreateDto.html":{}}}],["object",{"_index":470,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["object.entries(error.constraints",{"_index":486,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["object.keys(value).length",{"_index":489,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["observable",{"_index":235,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["one",{"_index":410,"title":{},"body":{"classes/UserCreateDto.html":{}}}],["onetomany",{"_index":399,"title":{},"body":{"classes/User.html":{}}}],["onetomany(undefined",{"_index":394,"title":{},"body":{"classes/User.html":{}}}],["open",{"_index":575,"title":{},"body":{"index.html":{}}}],["optional",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["overview",{"_index":601,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":511,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":340,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["parseint(process.env.db_port",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseintpipe",{"_index":342,"title":{},"body":{"controllers/TasksController.html":{}}}],["passport",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":214,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":103,"title":{},"body":{"classes/AuthDto.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["passwordconfirmation",{"_index":408,"title":{},"body":{"classes/UserCreateDto.html":{},"classes/UserRepository.html":{}}}],["path",{"_index":194,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":213,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":207,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["pipetransform",{"_index":466,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass",{"_index":467,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":476,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":584,"title":{},"body":{"index.html":{}}}],["port",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('/signin",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin')@usepipes(new",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup')@usepipes(new",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["primarygeneratedcolumn",{"_index":260,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["private",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["process.env.db_host",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":565,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":540,"title":{},"body":{"index.html":{}}}],["project",{"_index":576,"title":{},"body":{"index.html":{}}}],["promise",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["properties",{"_index":101,"title":{},"body":{"classes/AuthDto.html":{},"interfaces/JwtPayload.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskUpdateDto.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{}}}],["provide",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["put",{"_index":341,"title":{},"body":{"controllers/TasksController.html":{}}}],["put(':id",{"_index":337,"title":{},"body":{"controllers/TasksController.html":{}}}],["read",{"_index":585,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":281,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["req",{"_index":240,"title":{},"body":{"injectables/LogginInterceptor.html":{},"miscellaneous/variables.html":{}}}],["req.args.find(item",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.method",{"_index":242,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["req.url",{"_index":244,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["request",{"_index":182,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.method",{"_index":197,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.url",{"_index":195,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["response",{"_index":184,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(status).json(errorresponse",{"_index":202,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.affected",{"_index":316,"title":{},"body":{"classes/TaskRepository.html":{}}}],["results",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["rimraf",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":560,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":237,"title":{},"body":{"injectables/LogginInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":239,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["salt",{"_index":387,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["save",{"_index":327,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["save(@body(new",{"_index":357,"title":{},"body":{"controllers/TasksController.html":{}}}],["save(taskdata",{"_index":334,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["scalable",{"_index":545,"title":{},"body":{"index.html":{}}}],["secret",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":546,"title":{},"body":{"index.html":{}}}],["setdescription('the",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settitle('api",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion('1.0",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":547,"title":{},"body":{"index.html":{}}}],["signin",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(userdata",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signup(@body",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(userdata",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["sponsors",{"_index":579,"title":{},"body":{"index.html":{}}}],["src/.../get",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":537,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../swagger.config.ts",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../typeorm.config.ts",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/swagger.config.ts",{"_index":495,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/typeorm.config.ts",{"_index":499,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/get",{"_index":346,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/dtos/auth.dto",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["src/dtos/auth.dto.ts",{"_index":100,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/dtos/auth.dto.ts:13",{"_index":112,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/dtos/auth.dto.ts:7",{"_index":106,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/dtos/task",{"_index":274,"title":{},"body":{"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["src/dtos/user",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["src/entities/task.entity",{"_index":301,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["src/entities/task.entity.ts",{"_index":252,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/entities/task.entity.ts:10",{"_index":262,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:13",{"_index":258,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:16",{"_index":267,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:7",{"_index":261,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/user.entity",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["src/entities/user.entity.ts",{"_index":386,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/entities/user.entity.ts:12",{"_index":390,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:15",{"_index":396,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:18",{"_index":392,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:21",{"_index":393,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:24",{"_index":395,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:26",{"_index":398,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:9",{"_index":391,"title":{},"body":{"classes/User.html":{}}}],["src/exceptions/http",{"_index":167,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/interceptors/loggin.interceptor.ts",{"_index":227,"title":{},"body":{"injectables/LogginInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/loggin.interceptor.ts:7",{"_index":233,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["src/main.ts",{"_index":505,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:15",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:21",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:16",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:20",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:9",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/jwt",{"_index":206,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":208,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts:20",{"_index":212,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:9",{"_index":210,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/tasks/tasks.controller.ts",{"_index":324,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/modules/tasks/tasks.controller.ts:17",{"_index":330,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/modules/tasks/tasks.controller.ts:22",{"_index":333,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/modules/tasks/tasks.controller.ts:27",{"_index":335,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/modules/tasks/tasks.controller.ts:32",{"_index":338,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/modules/tasks/tasks.controller.ts:37",{"_index":329,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/modules/tasks/tasks.module.ts",{"_index":367,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/modules/tasks/tasks.service.ts",{"_index":372,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/modules/tasks/tasks.service.ts:10",{"_index":374,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:16",{"_index":376,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:20",{"_index":378,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:24",{"_index":377,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:28",{"_index":379,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:32",{"_index":375,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/pipes/validation.pipes",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["src/pipes/validation.pipes.ts",{"_index":447,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/pipes/validation.pipes.ts:24",{"_index":461,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/pipes/validation.pipes.ts:29",{"_index":453,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/pipes/validation.pipes.ts:37",{"_index":456,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/pipes/validation.pipes.ts:8",{"_index":465,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/repositories/taskrepository",{"_index":369,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["src/repositories/taskrepository.ts",{"_index":280,"title":{},"body":{"classes/TaskRepository.html":{},"coverage.html":{}}}],["src/repositories/taskrepository.ts:10",{"_index":293,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/repositories/taskrepository.ts:14",{"_index":288,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/repositories/taskrepository.ts:29",{"_index":295,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/repositories/taskrepository.ts:39",{"_index":299,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/repositories/taskrepository.ts:52",{"_index":291,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/repositories/userrepository",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/repositories/userrepository.ts",{"_index":419,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/repositories/userrepository.ts:10",{"_index":424,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/repositories/userrepository.ts:34",{"_index":426,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/repositories/userrepository.ts:45",{"_index":423,"title":{},"body":{"classes/UserRepository.html":{}}}],["start",{"_index":561,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":564,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":566,"title":{},"body":{"index.html":{}}}],["started",{"_index":539,"title":{"index.html":{}},"body":{}}],["starter",{"_index":554,"title":{},"body":{"index.html":{}}}],["statements",{"_index":494,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":186,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":588,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":215,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":104,"title":{},"body":{"classes/AuthDto.html":{},"interfaces/JwtPayload.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskUpdateDto.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["submitted",{"_index":474,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["super",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":580,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":599,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["swaggerconfig",{"_index":497,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":238,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["task",{"_index":251,"title":{"classes/Task.html":{}},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"coverage.html":{}}}],["task.delete({id",{"_index":315,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.description",{"_index":307,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.entity",{"_index":401,"title":{},"body":{"classes/User.html":{}}}],["task.find",{"_index":305,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.findone",{"_index":311,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.save",{"_index":309,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.title",{"_index":306,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.user",{"_index":308,"title":{},"body":{"classes/TaskRepository.html":{},"classes/User.html":{}}}],["taskcreatedto",{"_index":273,"title":{"classes/TaskCreateDto.html":{}},"body":{"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["taskdata",{"_index":297,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["taskdto",{"_index":289,"title":{},"body":{"classes/TaskRepository.html":{}}}],["taskrepository",{"_index":279,"title":{"classes/TaskRepository.html":{}},"body":{"classes/TaskRepository.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks",{"_index":325,"title":{},"body":{"controllers/TasksController.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["tasks.controller",{"_index":368,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":344,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["taskscontroller",{"_index":323,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["taskservice",{"_index":352,"title":{},"body":{"controllers/TasksController.html":{}}}],["tasksmodule",{"_index":13,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":343,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["taskupdatedto",{"_index":298,"title":{"classes/TaskUpdateDto.html":{}},"body":{"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["test",{"_index":569,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":572,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":571,"title":{},"body":{"index.html":{}}}],["tests",{"_index":568,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":578,"title":{},"body":{"index.html":{}}}],["this.authservice.signin(userdata",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(userdata",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.findone",{"_index":445,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.formaterrors(errors",{"_index":480,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.getbyid(id",{"_index":314,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.hashpassword(password",{"_index":437,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.isempty(value",{"_index":471,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.jwtservice.sign",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":407,"title":{},"body":{"classes/User.html":{}}}],["this.salt",{"_index":406,"title":{},"body":{"classes/User.html":{}}}],["this.taskrepository.createtask(taskdata",{"_index":382,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.destroy(id",{"_index":385,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.getall(user",{"_index":381,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.getbyid(id",{"_index":383,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.updatetask(id",{"_index":384,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskservice.destroy(id",{"_index":363,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.getall(user",{"_index":354,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.getone(id",{"_index":356,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.save(taskdata",{"_index":358,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.update(id",{"_index":361,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tovalidate(metatype",{"_index":475,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.userrepository.findone",{"_index":226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userrepository.signup(userdata",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.validateuserpassword(userdata",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{}}}],["timestamp",{"_index":192,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":256,"title":{},"body":{"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{}}}],["touch",{"_index":589,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":450,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":459,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":451,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":463,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":468,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["true",{"_index":490,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":438,"title":{},"body":{"classes/UserRepository.html":{}}}],["ts",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":595,"title":{},"body":{"index.html":{}}}],["type",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LogginInterceptor.html":{},"classes/Task.html":{},"classes/TaskCreateDto.html":{},"classes/TaskRepository.html":{},"classes/TaskUpdateDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":270,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([taskrepository",{"_index":371,"title":{},"body":{"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":481,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.includes(metatype",{"_index":483,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":553,"title":{},"body":{"index.html":{}}}],["ui",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":264,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{},"injectables/ValidationPipe.html":{}}}],["unique",{"_index":400,"title":{},"body":{"classes/User.html":{}}}],["unique(['email",{"_index":403,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":567,"title":{},"body":{"index.html":{}}}],["update",{"_index":303,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["update(@param('id",{"_index":359,"title":{},"body":{"controllers/TasksController.html":{}}}],["update(id",{"_index":336,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["update.ts",{"_index":318,"title":{},"body":{"classes/TaskUpdateDto.html":{},"coverage.html":{}}}],["update.ts:13",{"_index":320,"title":{},"body":{"classes/TaskUpdateDto.html":{}}}],["update.ts:8",{"_index":321,"title":{},"body":{"classes/TaskUpdateDto.html":{}}}],["updatetask",{"_index":286,"title":{},"body":{"classes/TaskRepository.html":{}}}],["updatetask(id",{"_index":296,"title":{},"body":{"classes/TaskRepository.html":{}}}],["url",{"_index":243,"title":{},"body":{"injectables/LogginInterceptor.html":{}}}],["useclass",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":339,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(authguard",{"_index":349,"title":{},"body":{"controllers/TasksController.html":{}}}],["usepipes",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["usepipes(new",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":218,"title":{"classes/User.html":{}},"body":{"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":347,"title":{},"body":{"controllers/TasksController.html":{}}}],["user.decorator.ts",{"_index":500,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":432,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.entity",{"_index":271,"title":{},"body":{"classes/Task.html":{}}}],["user.password",{"_index":436,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.salt",{"_index":434,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.save",{"_index":439,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.tasks",{"_index":272,"title":{},"body":{"classes/Task.html":{}}}],["user.username",{"_index":433,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.validatepassword(password",{"_index":446,"title":{},"body":{"classes/UserRepository.html":{}}}],["usercreatedto",{"_index":76,"title":{"classes/UserCreateDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["userdata",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["username",{"_index":388,"title":{},"body":{"classes/User.html":{},"classes/UserCreateDto.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":132,"title":{"classes/UserRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["validate",{"_index":209,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":477,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(payload",{"_index":211,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatepassword",{"_index":389,"title":{},"body":{"classes/User.html":{}}}],["validatepassword(password",{"_index":397,"title":{},"body":{"classes/User.html":{}}}],["validateuserpassword",{"_index":421,"title":{},"body":{"classes/UserRepository.html":{}}}],["validateuserpassword(userdata",{"_index":425,"title":{},"body":{"classes/UserRepository.html":{}}}],["validationpipe",{"_index":65,"title":{"injectables/ValidationPipe.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":117,"title":{},"body":{"classes/AuthDto.html":{},"classes/TaskCreateDto.html":{},"classes/TaskUpdateDto.html":{},"classes/UserCreateDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":457,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":496,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":607,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":178,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["watch",{"_index":562,"title":{},"body":{"index.html":{}}}],["weak",{"_index":111,"title":{},"body":{"classes/AuthDto.html":{}}}],["website",{"_index":593,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":583,"title":{},"body":{"index.html":{}}}],["z",{"_index":109,"title":{},"body":{"classes/AuthDto.html":{},"classes/UserCreateDto.html":{}}}],["z])(?=.*[a",{"_index":108,"title":{},"body":{"classes/AuthDto.html":{},"classes/UserCreateDto.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { TasksModule } from './modules/tasks/tasks.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\nimport { APP_FILTER, APP_INTERCEPTOR } from '@nestjs/core';\nimport { HttpExceptionFilter } from './exceptions/http-exception.filter';\nimport { LogginInterceptor } from './interceptors/loggin.interceptor';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(typeOrmConfig),\n    AuthModule,\n    TasksModule,\n    ConfigModule.forRoot({\n      envFilePath: '.env',\n    })\n  ],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: HttpExceptionFilter,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LogginInterceptor,\n    },\n  ]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                signIn\n                            \n                            \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \nsignIn(userData: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \nsignUp(userData: UserCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                UserCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, UsePipes } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { ValidationPipe } from 'src/pipes/validation.pipes';\nimport { UserCreateDto } from 'src/dtos/user-create.dto';\nimport { AuthDto } from 'src/dtos/auth.dto';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private authService: AuthService,\n    ) {}\n\n    @Post('/signup')\n    @UsePipes(new ValidationPipe())\n    signUp(@Body() userData: UserCreateDto): Promise {\n        return this.authService.signUp(userData);\n    }\n\n    @Post('/signin')\n    @UsePipes(new ValidationPipe())\n    signIn(@Body() userData: AuthDto): Promise {\n        return this.authService.signIn(userData);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/auth.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsString()@MinLength(6)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/auth.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Matches, IsEmail, IsString, MinLength } from \"class-validator\";\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthDto {\n    @ApiProperty()\n    @IsEmail()\n    email: string;\n\n    @ApiProperty()\n    @IsString()\n    @MinLength(6)\n    @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak'})\n    password: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from 'src/repositories/UserRepository';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: {\n        expiresIn: 3600,\n      },\n    }),\n    TypeOrmModule.forFeature([UserRepository]),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(userData: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userData: UserCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                UserCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRepository } from 'src/repositories/UserRepository';\nimport { JwtService } from '@nestjs/jwt'\nimport { UserCreateDto } from 'src/dtos/user-create.dto';\nimport { AuthDto } from 'src/dtos/auth.dto';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @InjectRepository(UserRepository)\n        private userRepository: UserRepository,\n        private jwtService: JwtService,\n    ) {}\n\n    async signUp(userData: UserCreateDto): Promise {\n        return this.userRepository.signUp(userData);\n    }\n\n    async signIn(userData: AuthDto): Promise {\n        const email = await this.userRepository.validateUserPassword(userData);\n\n        if (!email) {\n            throw new UnauthorizedException('Invalid Credentials');\n        }\n\n        const accessToken = this.jwtService.sign({ email });\n\n        return { accessToken };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exceptions/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/exceptions/http-exception.filter.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, HttpException, ArgumentsHost, Logger, Catch } from \"@nestjs/common\";\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const request = ctx.getRequest();\n        const response = ctx.getResponse();\n        const status = exception.getStatus();\n\n        const error = exception.getResponse()['error'];\n\n        const errorResponse = {\n            code: status,\n            timestamp: new Date().toLocaleDateString(),\n            path: request.url,\n            method: request.method,\n            message: error || exception.message || null,\n        }\n\n        Logger.error(\n            `${request.method} ${request.url}`,\n            JSON.stringify(errorResponse),\n            'ExceptionFilter',\n        )\n\n        response.status(status).json(errorResponse);\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n    email: string;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRepository } from 'src/repositories/UserRepository';\nimport { User } from 'src/entities/user.entity';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        @InjectRepository(UserRepository)\n        private userRepository: UserRepository,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: process.env.JWT_SECRET,\n        });\n    }\n\n    async validate(payload: any): Promise {\n        const { email } = payload;\n        \n        const user = await this.userRepository.findOne({ email });\n\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogginInterceptor.html":{"url":"injectables/LogginInterceptor.html","title":"injectable - LogginInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LogginInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/loggin.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/loggin.interceptor.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, Injectable, NestInterceptor, Logger } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LogginInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const req = context.switchToHttp().getRequest();\n    const method = req.method;\n    const url = req.url;\n    const now = Date.now();\n\n    return next.handle().pipe(\n      tap(() => Logger.log(`${method} ${url} ${Date.now() - now}ms`, context.getClass().name)),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/task.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {eager: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, BaseEntity, Column, ManyToOne } from \"typeorm\";\nimport { User } from \"./user.entity\";\n\n@Entity()\nexport class Task extends BaseEntity{\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    title: string;\n\n    @Column()\n    description: string;\n\n    @ManyToOne(() => User, user => user.tasks, { eager: false })\n    user: User;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskCreateDto.html":{"url":"classes/TaskCreateDto.html","title":"class - TaskCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/task-create.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/task-create.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/task-create.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class TaskCreateDto {\n    @ApiProperty()\n    @IsString()\n    title: string;\n\n    @ApiProperty()\n    @IsString()\n    description: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskRepository.html":{"url":"classes/TaskRepository.html","title":"class - TaskRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/TaskRepository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                destroy\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(taskDto: TaskCreateDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/TaskRepository.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskDto\n                                    \n                                                TaskCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/TaskRepository.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/TaskRepository.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/TaskRepository.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(id: number, taskData: TaskUpdateDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/TaskRepository.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskData\n                                    \n                                                TaskUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from \"typeorm\";\nimport { Task } from \"src/entities/task.entity\";\nimport { TaskCreateDto } from \"src/dtos/task-create.dto\";\nimport { User } from \"src/entities/user.entity\";\nimport { NotFoundException } from \"@nestjs/common\";\nimport { TaskUpdateDto } from \"src/dtos/task-update\";\n\n@EntityRepository(Task)\nexport class TaskRepository extends Repository {\n    async getAll(user: User): Promise {\n        return await Task.find({ user });\n    }\n\n    async createTask(taskDto: TaskCreateDto, user: User): Promise {\n        const { title, description } = taskDto;\n\n        const task = new Task();\n        task.title = title;\n        task.description = description;\n        task.user = user;\n\n        await task.save();\n\n        delete task.user;\n\n        return task;\n    }\n\n    async getById(id: number, user: User): Promise {\n        const task = await Task.findOne({ where: {id, user} });\n\n        if (!task) {\n            throw new NotFoundException('Task not found');\n        }\n\n        return task;\n    }\n\n    async updateTask(id: number, taskData: TaskUpdateDto, user: User): Promise {\n        const { description, title } = taskData;\n\n        const task = await this.getById(id, user);\n\n        task.description = description ? description : task.description;\n        task.title = title ? title : task.title;\n        \n        await task.save();\n        \n        return task;\n    }\n\n    async destroy(id: number, user: User): Promise {\n        const result = await Task.delete({id, user});\n\n        if (result.affected === 0) {\n            throw new NotFoundException('Task not found');\n        }\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskUpdateDto.html":{"url":"classes/TaskUpdateDto.html","title":"class - TaskUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/task-update.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiProperty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/task-update.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiProperty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/task-update.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional } from \"class-validator\";\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class TaskUpdateDto {\n    @IsOptional()\n    @ApiProperty()\n    @IsString()\n    title: string;\n\n    @IsOptional()\n    @ApiProperty()\n    @IsString()\n    description: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                destroy\n                            \n                            \n                                getAll\n                            \n                            \n                                getOne\n                            \n                            \n                                save\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \ndestroy(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \ngetOne(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(taskData: TaskCreateDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskData\n                                    \n                                                TaskCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, taskData: TaskUpdateDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskData\n                                    \n                                                TaskUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Post, Body, Param, Put, ParseIntPipe, Delete } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { GetUser } from 'src/decorators/get-user.decorator';\nimport { User } from 'src/entities/user.entity';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Task } from 'src/entities/task.entity';\nimport { TaskCreateDto } from 'src/dtos/task-create.dto';\nimport { ValidationPipe } from 'src/pipes/validation.pipes';\nimport { TaskUpdateDto } from 'src/dtos/task-update';\n\n@UseGuards(AuthGuard())\n@Controller('tasks')\nexport class TasksController {\n    constructor(private taskService: TasksService) {}\n\n    @Get()\n    getAll(@GetUser() user: User): Promise {\n        return this.taskService.getAll(user);\n    }\n\n    @Get(':id')\n    getOne(@Param('id', ParseIntPipe) id: number, @GetUser() user: User): Promise {\n        return this.taskService.getOne(id, user);\n    }\n\n    @Post()\n    save(@Body(new ValidationPipe()) taskData: TaskCreateDto, @GetUser() user: User): Promise {\n        return this.taskService.save(taskData, user);\n    }\n\n    @Put(':id')\n    update(@Param('id', ParseIntPipe) id: number, @Body(new ValidationPipe()) taskData: TaskUpdateDto, @GetUser() user: User): Promise {\n        return this.taskService.update(id, taskData, user);\n    }\n\n    @Delete(':id')\n    destroy(@Param('id', ParseIntPipe) id: number, @GetUser() user: User): Promise {\n        return this.taskService.destroy(id, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_imports\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { TasksController } from './tasks.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskRepository } from 'src/repositories/TaskRepository';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([TaskRepository]),\n    AuthModule,\n  ],\n  providers: [TasksService],\n  controllers: [TasksController]\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/tasks.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                destroy\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: TaskRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/tasks/tasks.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        TaskRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(taskData: TaskCreateDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskData\n                                    \n                                                TaskCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, taskData: TaskUpdateDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskData\n                                    \n                                                TaskUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { TaskRepository } from 'src/repositories/TaskRepository';\nimport { User } from 'src/entities/user.entity';\nimport { Task } from 'src/entities/task.entity';\nimport { TaskCreateDto } from 'src/dtos/task-create.dto';\nimport { TaskUpdateDto } from 'src/dtos/task-update';\n\n@Injectable()\nexport class TasksService {\n    constructor(\n        @InjectRepository(TaskRepository)\n        private taskRepository: TaskRepository,\n    ) {}\n\n    async getAll(user: User): Promise {\n        return await this.taskRepository.getAll(user);\n    }\n\n    async save(taskData: TaskCreateDto, user: User): Promise {\n        return await this.taskRepository.createTask(taskData, user);\n    }\n\n    async getOne(id: number, user: User): Promise {\n        return await this.taskRepository.getById(id, user);\n    }\n\n    async update(id: number, taskData: TaskUpdateDto, user: User): Promise {\n        return await this.taskRepository.updateTask(id, taskData, user);\n    }\n\n    async destroy(id: number, user: User): Promise {\n        return await this.taskRepository.destroy(id, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                tasks\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Task[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/entities/user.entity.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryGeneratedColumn, Column, OneToMany, Unique } from \"typeorm\";\nimport { Task } from \"./task.entity\";\nimport * as bcrypt from 'bcrypt';\n\n@Entity()\n@Unique(['email', 'username'])\nexport class User extends BaseEntity{\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    email: string;\n\n    @Column()\n    username: string;\n\n    @Column()\n    password: string;\n\n    @Column()\n    salt: string;\n\n    @OneToMany(() => Task, task => task.user)\n    tasks: Task[];\n\n    async validatePassword(password: string): Promise {\n        const hash = await bcrypt.hash(password, this.salt)\n        return hash === this.password;\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCreateDto.html":{"url":"classes/UserCreateDto.html","title":"class - UserCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/user-create.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                passwordConfirmation\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/user-create.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsString()@MinLength(6)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password must be at least one capital letter and must be alpha numeric'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/user-create.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            passwordConfirmation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsString()@MinLength(6)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/user-create.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dtos/user-create.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Matches, IsEmail, IsString, MinLength } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class UserCreateDto {\n\n    @ApiProperty()\n    @IsEmail()\n    email: string;\n\n    @ApiProperty()\n    @IsString()\n    username: string;\n\n    @ApiProperty()\n    @IsString()\n    @MinLength(6)\n    @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password must be at least one capital letter and must be alpha numeric'})\n    password: string;\n\n    @ApiProperty()\n    @IsString()\n    @MinLength(6)\n    passwordConfirmation: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/UserRepository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/UserRepository.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userData: UserCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/UserRepository.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                UserCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserPassword(userData: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/UserRepository.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Repository, EntityRepository } from \"typeorm\";\nimport { User } from \"src/entities/user.entity\";\nimport * as bcrypt from 'bcrypt';\nimport { ConflictException, InternalServerErrorException, BadRequestException } from \"@nestjs/common\";\nimport { UserCreateDto } from \"src/dtos/user-create.dto\";\nimport { AuthDto } from \"src/dtos/auth.dto\";\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n    async signUp(userData: UserCreateDto): Promise {\n        const { email, password, username, passwordConfirmation } = userData;\n\n        if (password !== passwordConfirmation) {\n            throw new BadRequestException('Passwords not matches')\n        }\n\n        const user = new User();\n        user.email = email;\n        user.username = username;\n        user.salt = await bcrypt.genSalt();\n        user.password = await this.hashPassword(password, user.salt);\n\n        try {\n            await user.save();\n        } catch (error) {\n            if (error.code === 'ER_DUP_ENTRY') {\n                throw new ConflictException('Username or email already exists');\n            } else {\n                throw new InternalServerErrorException();\n            }\n        }\n    }\n\n    async validateUserPassword(userData: AuthDto): Promise {\n        const { email, password } = userData;\n        const user = await this.findOne({ email })\n\n        if (user && await user.validatePassword(password)) {\n            return user.email;\n        } else {\n            return null;\n        }\n    }\n\n    private async hashPassword(password: string, salt: string): Promise {\n        return bcrypt.hash(password, salt);\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/validation.pipes.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                formatErrors\n                            \n                            \n                                    Private\n                                isEmpty\n                            \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            formatErrors\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formatErrors(errors: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validation.pipes.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isEmpty\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmpty(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validation.pipes.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            toValidate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validation.pipes.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validation.pipes.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  \n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (value instanceof Object && this.isEmpty(value)) {\n        throw new BadRequestException('Validation failed: No body submitted')\n    }\n\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException(`Validation failed: ${this.formatErrors(errors)}`);\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Function): boolean {\n    const types: Function[] = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n\n  private formatErrors(errors: any[]) {\n    return errors.map(error => {\n      for (const [key] of Object.entries(error.constraints)) {\n        return error.constraints[key];\n      }\n    }).join(', ')\n  }\n\n  private isEmpty(value: any) {\n      if (Object.keys(value).length > 0) {\n          return false;\n      } \n      return true;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dtos/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dtos/task-create.dto.ts\n            \n            class\n            TaskCreateDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dtos/task-update.ts\n            \n            class\n            TaskUpdateDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dtos/user-create.dto.ts\n            \n            class\n            UserCreateDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entities/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/exceptions/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/loggin.interceptor.ts\n            \n            injectable\n            LogginInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/pipes/validation.pipes.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repositories/TaskRepository.ts\n            \n            class\n            TaskRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/repositories/UserRepository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.0.0\n        \n            @nestjs/passport : ^7.0.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.5.9\n        \n            @nestjs/typeorm : ^7.1.0\n        \n            bcrypt : ^4.0.1\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.12.2\n        \n            mysql : ^2.18.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.4\n        \n            typeorm : ^0.2.25\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            swaggerConfig   (src/.../swagger.config.ts)\n                        \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data, req): User => {\n    return req.args.find(item => item.res)['user'];\n})\n                        \n                    \n\n\n            \n        \n\n    src/config/swagger.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new DocumentBuilder()\n    .setTitle('Api Tasks')\n    .setDescription('The tasks API description')\n    .setVersion('1.0')\n    .build()\n                        \n                    \n\n\n            \n        \n\n    src/config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            typeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    type: 'mysql',\n    host: process.env.DB_HOST,\n    port: parseInt(process.env.DB_PORT) || 13306,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    entities: [__dirname + '/../entities/*.entity.{js, ts}'],\n    synchronize: true,\n    logging: 'all',\n    logger: 'advanced-console',\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
